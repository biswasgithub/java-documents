Push existion project to Git*** 
Clone: git clone https://github.com/URL-TO-REPO-HERE
1. Change to the root of the local repository:
	$ cd <repo_name>

2. initialized the repository:
	$ git init

3. Check status: check whether the file has been added to index or not
	$ git status 

4. List all your branches:
	$ git branch -a

5. Checkout the branch you want to use.
	$ git checkout <feature_branch>
	
6. Create a new branch:
	$ git checkout -b new-branch existing-branch 
	(This creates a new branch new-branch, based on existing-branch. The -b flag tells it to create a new branch at the same time	

7. create new branch and Switch to new branch:	
	$ git checkout -b amend-my-name (created a new branch and Switched to a new branch 'amend-my-name')

8. Confirm you are now working on that branch:
	$ git branch
	$ git branch -- merged  // show merged branch
	$ git branch --no-merged  // show unmerge branch
	$ git branch -v  // show last commited message

9. Delete branch:
	$ git branch -d <branch> / git branch -D <branch> (If error: The branch 'demo' is not fully merged. Then use git branch -D <branch>)
	$ git push origin --delete {the_remote_branch} // delete branch from remote
   Delete folder from github:
   	$ git rm -r folder-name
	$ git add -A
	$ git commit -m "delete file/folder"
	$ git push -u origin master 
	
10. Stage your changes:
	$ git add . / git add -A  (adds the entire project/all files to the staging area)
	$ git add <fileName>  (Git moves all changes of <file> in the staging area to wait for the next commit.)
	& git add <DirectoryName>  (adds the entire <directory> to the staging area) 

11. Commit your changes:
	$ git commit -m "Commit message" 
	$ git commit -a -m "Commit msg"   // combination of add and commit

12. Push your changes to GitHub:
	$ git push <remote> <branch>
	$ git push origin amend-my-name
	$ git push -f origin master  (-f | force)
	$ git push -u origin master  ([-u | --set-upstream])

13. set origin: add existion project to gitHub:(sequnce of step:1->2->3->4->->5->6->7 )
	$ git remote add origin <url of the branch>
	$ git remote add origin https://github.com/biswasgithub/employee-consumer.git

14. git pull:
	$ git pull origin master   // pull the code from master 
	
	When you are executing pull command it will execute two commands in background.
				first fetch and then merge
	Fetch command will download all files from remote repo to local repo.
	
	C push his changes(line 15,16) in branch feature/MER-12. You are working on same branch and made your chandes(Line 20,21). While committing your code 
	1st you have to fetch the updated version of feature/MER-12 branch and then you have to commit. So "git pull" will be used. git pull 1st fetch the 
	updated version(Line 15,16) and then merge your changes with updated version (Line 15,16,20,21). Then commit.
	If you don't fetch the updated version and try to commit the you will get error.
	
	In git bash write: git pull  then open GitGUI and commit.

15. commit exiting project folder to git:
	$ git init
	$ git status
	$ git add -A
	$ git status
	$ git commit -m "initial commit"
	$ git remote add origin remoteRepositoryURL
	$ git push -f origin master

16. commit exiting project to git:
	git init -> git add . -> git commit -m "initial commit" -> git remote add origin remoteRepositoryURL -> git remote -v -> git push -f origin master
17. Copy all files/folder from master to feature: (Don't apply this Because it will delete existing file of feature branch and copy all files from master branch)
	$ git checkout feature
	$ git merge master
	$ git commit -m "copy all file/folder from master"
	$ git push origin feature
 18: Merge one branch to another branch and resolved conflict:
 	My-branch and his-branch have common file name controller.java. Now I have written some line of code 10 to 20 in controller. Then add and commit this file(not push).
	Ram has written some line of code 15 to 25 in same controller file. Then add and commit this file(not push).
	Now If I want to merge my-branch to his-branch then i will get conflict. Resolve this conflit and then add and commit this file. Then push.
	$ git checkout my-branch
	$ git merge his-branch   // will lead conflict
	$ git merge --abort  // Rollback the changes and it will back its orevious state.
	$ git add file_name
	$ git commit -m "resloved conflict"
	$ git push origin my-branch
19. show last commit:
	$ git branch -v
20. merge and resolved conflict:
	A and B are working in defferent repo folder. They are both pulled the code from master. A change the controller.java file. Then A did add,commit and push the code into 	 master.
	Now B also change the controller.java file in same line. Then B added and did comment. When B try to push the code the B's pull request will be rejected.
	To solve this prolem:
	$ git pull --rebase origin master  // will show conflict. Then solve the conflict.
	$ git rebase --continue 
	$ git push origin master


******Note:
Problem:
$ git push -f origin master
fatal: 'origin' does not appear to be a git repository
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
Solution: set remoti origin by usnig- $ git remote add origin https://github.com/biswasgithub/employee-consumer.git

Problem: 
	error: pathspec 'BRANCH-NAME' did not match any file(s) known to git.
	ans: git remote update
	git fetch 
	git checkout -b <branch name>
